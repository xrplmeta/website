import { formatValue } from '@xrplkit/amount'

include '~/styles/tokens.xcss'



export default {
	oncreate: async x => {
		x.tokens.events.on('update', x.redraw)
		await x.tokens.loadPage(0)
	},
	onremove: x => {
		x.tokens.events.off('update', x.redraw)
	},
	view: x => (
		<stack class="tokens">
			<flex class="head">
				<stack>
					Token
				</stack>
				<stack>
					7 Day Trading Volume
				</stack>
				<stack>
					Trustlines
				</stack>
			</flex>
			{#if x.tokens.list && !x.tokens.loading}
				<stack class="list">
					{#for let token of x.tokens.list}
						<Entry token={token}/>
					{/for}
				</stack>
			{:else}
				<stack class="list placeholder">
					<EntryPlaceholder/>
					<EntryPlaceholder/>
					<EntryPlaceholder/>
					<EntryPlaceholder/>
					<EntryPlaceholder/>
				</stack>
			{/if}
		</stack>
	)
}

const Entry = x => {
	let token = x.attrs.token
	let meta = token.meta
	let metrics = token.metrics
	let icon = meta.token.icon || meta.issuer.icon
	let formattedVolume = formatValue(metrics.volume_7d)
	let formattedTrustlines = metrics.trustlines.toLocaleString('en')

	return x => (
		<flex class="entry">
			<link to={`/tokens/${token.currency}:${token.issuer}`}>
				{#if icon}
					<icon class="icon" src={icon}/>
				{:else}
					<icon class="icon placeholder" asset="token-placeholder"/>
				{/if}
			</link>
			<stack class="name">
				<link to={`/tokens/${token.currency}:${token.issuer}`}>
					<label>{token.currency}</label>
					<label>{token.issuer}</label>
				</link>
			</stack>
			<stack class="volume">
				{formattedVolume} XRP
			</stack>
			<stack class="trustlines">
				{formattedTrustlines}
			</stack>
		</flex>
	)
}


const EntryPlaceholder = x => (
	<flex class="entry placeholder">
		<stack class="icon"/>
		<stack class="name">
			<label/>
		</stack>
		<stack class="volume">
			<label/>
		</stack>
		<stack class="trustlines">
			<label/>
		</stack>
	</flex>
)